{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Horas de Servicio API",
    "description": "This API provides endpoints for managing service hours, user authentication, and various other functionalities for the Horas de Servicio application. It is built using Next.js and Node.js. The API is RESTful and all endpoints are documented here.\n\n Test accounts:\n Admin: admin@service.com\n Controller: controller@service.com\n Recruiter: recruiter@service.com\n Student: student@services.com \n\n Password: Funval2024"
  },
  "host": "localhost:3000/api/v1",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "securityDefinitions": {
    "authorization": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "Authentication token"
    }
  },
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login into the system",
        "description": "Endpoint to login into the system",
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "User information",
            "required": true,
            "schema": {
              "$ref": "#/components/loginRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        },
        "autoHeaders": false
      }
    },
    "/auth/profile": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Login into the system",
        "description": "Endpoint to login into the system",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/profileResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/services/": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Get all services",
        "description": "Endpoint to get all services, if the user is a student, it will return only the services of the user, if the user is an admin, it will return all the services, if the status query is passed, it will return the services with the status passed, 0 for pending and 1 for approved, ",
        "parameters": [
          {
            "name": "schema",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/servicesResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "post": {
        "tags": [
          "Services"
        ],
        "summary": "Create a new service",
        "description": "Endpoint to create a new service",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Service data.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "amount_reported": {
                  "type": "string",
                  "example": "Amount reported - number"
                },
                "description": {
                  "type": "string",
                  "example": "Description"
                },
                "category_id": {
                  "type": "string",
                  "example": "Category id"
                },
                "level": {
                  "type": "string",
                  "example": "Level -"
                },
                "evidence": {
                  "type": "string",
                  "example": "Evidence - pdf file"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "autoHeaders": false
      }
    },
    "/services/{id}": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Get a service",
        "description": "Endpoint to get a service by id, if the user is a student, it will return only the services of the user, if the user is an admin, it will return all the services",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/servicesResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Services"
        ],
        "summary": "update a service",
        "description": "Endpoint to update a service, can update amount_reported, description, category_id and evidence only, evidence is a pdf file, if the evidence is passed, it will be  , if not, it will not be updated, the same for the other fields",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Service data.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "amount_reported": {
                  "type": "string",
                  "example": "Amount reported - number"
                },
                "description": {
                  "type": "string",
                  "example": "Description"
                },
                "category_id": {
                  "type": "string",
                  "example": "Category id"
                },
                "level": {
                  "type": "string",
                  "example": "Level -"
                },
                "evidence": {
                  "type": "string",
                  "example": "Evidence - pdf file"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "autoHeaders": false
      }
    },
    "/services/evidence/{fileId}": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Download service evidence o render in browser",
        "description": "Endpoint to download the evidence of a service, if the opt query is passed with the value download, it will download the file, if not, it will render in the browser\r  try {\r  const { opt } = req.query;\r \r  const { fileId } = req.params;\r  if (!fileId) {\r  throw { status: 400, message: ",
        "produces": [
          "application/pdf"
        ],
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/services/{id}/review": {
      "patch": {
        "tags": [
          "Services"
        ],
        "summary": "Review a service",
        "description": "Endpoint to review or approved a service, can update amount_approved and comment only, comment is optional",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Service data.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "amount_approved": {
                  "type": "string",
                  "example": "Amount approved - number"
                },
                "comment": {
                  "type": "string",
                  "example": "Comment"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "autoHeaders": false
      }
    },
    "/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users",
        "description": "Endpoint to get all users can be filtered by role with the query parameter r = (admin, controller, recruiter)",
        "parameters": [
          {
            "name": "r",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user",
        "description": "Endpoint to create a new user with the role of admin, controller or recruiter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "form-data"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User data.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "f_name": {
                      "type": "string",
                      "example": "Monkey"
                    },
                    "s_name": {
                      "type": "string",
                      "example": ""
                    },
                    "f_lastname": {
                      "type": "string",
                      "example": "D."
                    },
                    "s_lastname": {
                      "type": "string",
                      "example": "Lufy"
                    }
                  }
                },
                "account": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "example": "monke_D@mail.com"
                    },
                    "role_id": {
                      "type": "number",
                      "example": 3
                    }
                  }
                },
                "schools": {
                  "type": "array",
                  "example": [
                    1
                  ],
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "message": "User   successfully",
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "autoHeaders": false
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by id",
        "description": "Endpoint to get a user by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user",
        "description": "Endpoint to update a user with the role of admin, controller or recruiter, can update whatever field you send in the body of the request. If you send the password field it will be hashed, do not send a field if you do not want to update it",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "User data.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "f_name": {
                      "type": "string",
                      "example": ""
                    },
                    "s_name": {
                      "type": "string",
                      "example": ""
                    },
                    "f_lastname": {
                      "type": "string",
                      "example": ""
                    },
                    "s_lastname": {
                      "type": "string",
                      "example": ""
                    }
                  }
                },
                "account": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "example": ""
                    },
                    "role_id": {
                      "type": "number",
                      "example": 1
                    }
                  }
                },
                "schools": {
                  "type": "array",
                  "example": [
                    1
                  ],
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "autoHeaders": false
      }
    },
    "/roles/": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get all roles",
        "description": "Endpoint to get all roles",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/roles/{id}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get a role",
        "description": "Endpoint to get a role by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/categories/": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get all categories",
        "description": "Endpoint to get all service categories",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Create a new category",
        "description": "Endpoint to create a new category",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Category data.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Category name"
                },
                "description": {
                  "type": "string",
                  "example": "Category description"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "autoHeaders": false
      }
    },
    "/categories/{id}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get category by id",
        "description": "Endpoint to get a category by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "Update a category",
        "description": "Endpoint to update a category, can update name and description only",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Category data.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Category name"
                },
                "description": {
                  "type": "string",
                  "example": "Category description"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "autoHeaders": false
      }
    },
    "/students/": {
      "get": {
        "tags": [
          "Students"
        ],
        "summary": "Get all students",
        "description": "Endpoint to get all students",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "post": {
        "tags": [
          "Students"
        ],
        "summary": "Create a new student",
        "description": "Endpoint to create a new student",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Student data.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "f_name": {
                      "type": "string",
                      "example": ""
                    },
                    "s_name": {
                      "type": "string",
                      "example": ""
                    },
                    "f_lastname": {
                      "type": "string",
                      "example": ""
                    },
                    "s_lastname": {
                      "type": "string",
                      "example": ""
                    }
                  }
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "example": ""
                    },
                    "registration_code": {
                      "type": "string",
                      "example": ""
                    }
                  }
                },
                "student": {
                  "type": "object",
                  "properties": {
                    "controller_id": {
                      "type": "number",
                      "example": 1
                    },
                    "recruiter_id": {
                      "type": "number",
                      "example": 1
                    },
                    "country_id": {
                      "type": "number",
                      "example": 1
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "autoHeaders": false
      }
    },
    "/students/{id}": {
      "get": {
        "tags": [
          "Students"
        ],
        "summary": "Get a student",
        "description": "Endpoint to get a student",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "Student id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Students"
        ],
        "summary": "Update a student",
        "description": "Endpoint to update a student, can update whatever field you send in the body of the request. If you send the password field it will be hashed, do not send a field if you do not want to update it",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Student data.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "f_name": {
                      "type": "string",
                      "example": ""
                    },
                    "s_name": {
                      "type": "string",
                      "example": ""
                    },
                    "f_lastname": {
                      "type": "string",
                      "example": ""
                    },
                    "s_lastname": {
                      "type": "string",
                      "example": ""
                    }
                  }
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "example": ""
                    },
                    "registration_code": {
                      "type": "string",
                      "example": ""
                    }
                  }
                },
                "student": {
                  "type": "object",
                  "properties": {
                    "controller_id": {
                      "type": "number",
                      "example": 1
                    },
                    "recruiter_id": {
                      "type": "number",
                      "example": 1
                    },
                    "country_id": {
                      "type": "number",
                      "example": 1
                    },
                    "level_id": {
                      "type": "number",
                      "example": 1
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "autoHeaders": false
      }
    },
    "/country/": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Get all countries",
        "description": "get all countries",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "post": {
        "tags": [
          "Country"
        ],
        "summary": "Create a new country",
        "description": "Endpoint to create a new country",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Country information.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "country name"
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "autoHeaders": false
      }
    },
    "/country/{id}": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Get a country by id",
        "description": "get a country by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Country"
        ],
        "summary": "update a country",
        "description": "Endpoint to update a country",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Country data.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "country name"
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "autoHeaders": false
      }
    },
    "/schools/": {
      "get": {
        "tags": [
          "Schools"
        ],
        "summary": "Get all schools",
        "description": "Endpoint to get all schools",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "post": {
        "tags": [
          "Schools"
        ],
        "summary": "Create a new school",
        "description": "Endpoint to create a new school",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "School Data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "school name"
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "autoHeaders": false
      }
    },
    "/schools/{id}": {
      "get": {
        "tags": [
          "Schools"
        ],
        "summary": "Get a school",
        "description": "Endpoint to get a school",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Schools"
        ],
        "summary": "Updata a new school",
        "description": "Endpoint to updata a new school",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "School Data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "school name"
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "autoHeaders": false
      }
    }
  },
  "components": {
    "loginRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "User email",
          "example": "exaple@mail.com"
        },
        "password": {
          "type": "string",
          "description": "User password",
          "example": "123456"
        }
      }
    },
    "profileResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "User id",
          "example": "4"
        },
        "email": {
          "type": "string",
          "description": "User email",
          "example": "example@mail.com"
        },
        "f_name": {
          "type": "string",
          "description": "User first name",
          "example": "Jorge"
        },
        "s_name": {
          "type": "string",
          "description": "User second name",
          "example": "Luis"
        },
        "f_lastname": {
          "type": "string",
          "description": "User first last name",
          "example": "Sosa"
        },
        "s_lastname": {
          "type": "string",
          "description": "User second last name",
          "example": "Nuñez"
        },
        "full_name": {
          "type": "string",
          "description": "User full name",
          "example": "Jorge Luis Sosa Nuñez"
        },
        "role": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "description": "Role id",
              "example": 1
            },
            "name": {
              "type": "string",
              "description": "Role name",
              "example": "Admin"
            }
          }
        }
      }
    },
    "servicesResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "description": "Service id",
          "example": 1
        },
        "amount_reported": {
          "type": "string",
          "description": "Amount reported",
          "example": "3"
        },
        "amount_approved": {
          "type": "string",
          "description": "Amount approved",
          "example": "2"
        },
        "evidence": {
          "type": "string",
          "description": "Evidence",
          "example": "1xvvLig6bmgGWvZhReKMCAf_wElJKTjrb"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "Viaje al tiempo, dos dias"
        },
        "comment": {
          "type": "string",
          "description": "Comment",
          "example": null
        },
        "status": {
          "type": "number",
          "description": "Status",
          "example": 1
        },
        "user_id": {
          "type": "number",
          "description": "User id",
          "example": 11
        },
        "reviewer_id": {
          "type": "number",
          "description": "Reviewer id",
          "example": 11
        },
        "category_id": {
          "type": "number",
          "description": "Category id",
          "example": 1
        },
        "level": {
          "type": "number",
          "description": "Level",
          "example": 1
        },
        "create_at": {
          "type": "string",
          "description": "Created at",
          "example": "2024-10-18T16:51:40.000Z"
        },
        "updated_at": {
          "type": "string",
          "description": "Updated at",
          "example": "2024-10-18T16:51:40.000Z"
        },
        "student": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "description": "Student id",
              "example": 11
            },
            "email": {
              "type": "string",
              "description": "Student email",
              "example": "example@mail.com"
            },
            "registration_code": {
              "type": "string",
              "description": "Student registration code",
              "example": "jrfctk0145e"
            },
            "name": {
              "type": "string",
              "description": "Student name",
              "example": "Jorge Luis Sosa Nuñez"
            },
            "controller": {
              "type": "string",
              "description": "Controller",
              "example": "Garp  D. Monkey"
            },
            "recruiter": {
              "type": "string",
              "description": "Recruiter",
              "example": "Monkey  D. Lufy"
            }
          }
        }
      }
    }
  }
}